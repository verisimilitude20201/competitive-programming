class NodeState(Enum):
    UNVISITED = "unvisited"
    VISITING = "visiting"
    VISITED = "visited"

import deque 

def check_if_path_is_there(G, start_node, end_node):
    if G is none or start_node is None or end_node is None:
        return None

    for node in G.get_nodes()
        node.state = NodeState.UNVISITED

    start_node.state = NodeState.VISITING
    queue = deque()
    queue.append_left(start_node)

    while queue:
        node = queue.pop()
        if node:
            for adjacent_node in node.get_adjacent_nodes:
                if adjacent_node.state == NodeState.UNVISITED:
                    if end_node == adjacent_node:
                        return True
                    else:
                        adjacent_node.state = NodeState.VISITING
                        queue.append_left(adjacent_node)

            node.state = NodeState.VISITED

    return False